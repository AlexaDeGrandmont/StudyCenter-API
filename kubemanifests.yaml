apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: api
    name: api
  spec:
    ports:
    - name: "3030"
      port: 3030
      targetPort: 3000
    selector:
      io.kompose.service: api
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: pgadmin
    name: pgadmin
  spec:
    ports:
    - name: "5556"
      port: 5556
      targetPort: 80
    selector:
      io.kompose.service: pgadmin
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: redis
    name: redis
  spec:
    ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
    selector:
      io.kompose.service: redis
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: api
    name: api
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: api
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/studycenter: "true"
          io.kompose.service: api
      spec:
        containers:
        - args:
          - bash
          - -c
          - rm -f tmp/pids/server.pid && bundle exec rails db:setup && bundle exec
            rails s -p 3000 -b '0.0.0.0'
          image: mathyoumb/studycenterapi:latest
          imagePullPolicy: ""
          name: api
          ports:
          - containerPort: 3000
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: studycenter
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/studycenter: "true"
    podSelector:
      matchLabels:
        io.kompose.network/studycenter: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: db
    name: db
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: db
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/studycenter: "true"
          io.kompose.service: db
      spec:
        containers:
        - env:
          - name: POSTGRES_PASSWORD
            value: "1234"
          - name: POSTGRES_USER
            value: postgres
          image: postgres
          imagePullPolicy: ""
          name: db
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: studycenter
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/studycenter: "true"
    podSelector:
      matchLabels:
        io.kompose.network/studycenter: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: pgadmin
    name: pgadmin
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: pgadmin
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/studycenter: "true"
          io.kompose.service: pgadmin
      spec:
        containers:
        - env:
          - name: PGADMIN_DEFAULT_EMAIL
            value: pgadmin4@pgadmin.org
          - name: PGADMIN_DEFAULT_PASSWORD
            value: "1234"
          image: dpage/pgadmin4
          imagePullPolicy: ""
          name: pgadmin
          ports:
          - containerPort: 80
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: studycenter
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/studycenter: "true"
    podSelector:
      matchLabels:
        io.kompose.network/studycenter: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: redis
    name: redis
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: redis
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/studycenter: "true"
          io.kompose.service: redis
      spec:
        containers:
        - image: redis:latest
          imagePullPolicy: ""
          name: redis
          ports:
          - containerPort: 6379
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: studycenter
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/studycenter: "true"
    podSelector:
      matchLabels:
        io.kompose.network/studycenter: "true"
kind: List
metadata: {}
---
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    name: db
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    io.kompose.service: db

